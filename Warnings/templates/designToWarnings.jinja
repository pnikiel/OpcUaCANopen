#include <stdexcept>

#include <Warnings.hxx>
#include <LogIt.h>

namespace Warnings
{

std::map<std::string, Warning> WarningsDefinitions = 
{
{% for ce in designInspector.objectify_config_entries('Warnings') %}
  {"{{ce.get('name')}}", {}}{% if not loop.last %},{% endif %}
{% endfor %}
};

void validateWarnings()
{
    for (auto& warningDefinition : Warnings::WarningsDefinitions)
    {
        if (warningDefinition.second.turnOn && warningDefinition.second.turnOff)
            throw std::runtime_error("Conflicting command line arguments for warning [" + warningDefinition.first + "]");
    }
}

void passToConfiguration(Configuration::Warnings& warningsConfig)
{
{% for ce in designInspector.objectify_config_entries('Warnings') %}
  if (WarningsDefinitions["{{ce.get('name')}}"].turnOn || allWarnings)
    warningsConfig.{{ce.get('name')}}() = true;
  if (WarningsDefinitions["{{ce.get('name')}}"].turnOff || noWarnings)
    warningsConfig.{{ce.get('name')}}() = false;
{% endfor %}
}

void logWarningsConfiguration(Configuration::Warnings& warningsConfig)
{
    LOG(Log::INF) << "Warnings(spooky log) config: " 
    {% for ce in designInspector.objectify_config_entries('Warnings') %}
        << "{{ce.get('name')}}=" << warningsConfig.{{ce.get('name')}}() << " "
    {% endfor %} ;
}

bool allWarnings (false);
bool noWarnings (false);

}