
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.

    The stub of this file was generated by quasar (https://github.com/quasar-team/quasar/)

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.


 */


#include <Configuration.hxx> // TODO; should go away, is already in Base class for ages

#include <DRpdo.h>
#include <ASRpdo.h>
#include <ArrayTools.h>
#include <DNode.h>
#include <DBus.h>

#include <CanMessage.h>

namespace Device
{
// 1111111111111111111111111111111111111111111111111111111111111111111111111
// 1     GENERATED CODE STARTS HERE AND FINISHES AT SECTION 2              1
// 1     Users don't modify this code!!!!                                  1
// 1     If you modify this code you may start a fire or a flood somewhere,1
// 1     and some human being may possible cease to exist. You don't want  1
// 1     to be charged with that!                                          1
// 1111111111111111111111111111111111111111111111111111111111111111111111111






// 2222222222222222222222222222222222222222222222222222222222222222222222222
// 2     SEMI CUSTOM CODE STARTS HERE AND FINISHES AT SECTION 3            2
// 2     (code for which only stubs were generated automatically)          2
// 2     You should add the implementation but dont alter the headers      2
// 2     (apart from constructor, in which you should complete initializati2
// 2     on list)                                                          2
// 2222222222222222222222222222222222222222222222222222222222222222222222222

/* sample ctr */
DRpdo::DRpdo (
    const Configuration::Rpdo& config,
    Parent_DRpdo* parent
):
    Base_DRpdo( config, parent)

    /* fill up constructor initialization list here */
{
    /* fill up constructor body here */
    m_cache.assign(8, 0);
}

/* sample dtr */
DRpdo::~DRpdo ()
{
}

/* delegates for cachevariables */



/* delegators for methods */

// 3333333333333333333333333333333333333333333333333333333333333333333333333
// 3     FULLY CUSTOM CODE STARTS HERE                                     3
// 3     Below you put bodies for custom methods defined for this class.   3
// 3     You can do whatever you want, but please be decent.               3
// 3333333333333333333333333333333333333333333333333333333333333333333333333

//! sends and publishes to the address-space
void DRpdo::propagateCache()
{
    // this can certainly be done better!!
    UaVariant out;
    AddressSpace::ArrayTools::convertByteVectorToUaVariant(m_cache, out);
    UaByteString bs;
    out.toByteString(bs);
    getAddressSpaceLink()->setCache(bs, OpcUa_Good);

    CanMessage rpdoMessage;

    if (getCache().size() > sizeof(rpdoMessage.c_data))
    {
        throw std::runtime_error("TODO: Problem! Size of messages"); // TODO
    }

    std::copy(
        getCache().begin(),
        getCache().end(),
        rpdoMessage.c_data    
    );

    rpdoMessage.c_id = 0x200 + getParent()->id();
    rpdoMessage.c_dlc = sizeof m_cache;
    getParent()->getParent()->sendMessage(rpdoMessage);
}

}