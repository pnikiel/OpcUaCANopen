
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.

    The stub of this file was generated by quasar (https://github.com/quasar-team/quasar/)

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.


 */


#include <Configuration.hxx> // TODO; should go away, is already in Base class for ages

#include <DRpdoCachedVariable.h>
#include <ASRpdoCachedVariable.h>
#include <DRpdo.h>
#include <DNode.h>
#include <DBus.h>

#include <ValueMapper.h>
#include <Logging.hpp>

using namespace Logging;

namespace Device
{
// 1111111111111111111111111111111111111111111111111111111111111111111111111
// 1     GENERATED CODE STARTS HERE AND FINISHES AT SECTION 2              1
// 1     Users don't modify this code!!!!                                  1
// 1     If you modify this code you may start a fire or a flood somewhere,1
// 1     and some human being may possible cease to exist. You don't want  1
// 1     to be charged with that!                                          1
// 1111111111111111111111111111111111111111111111111111111111111111111111111






// 2222222222222222222222222222222222222222222222222222222222222222222222222
// 2     SEMI CUSTOM CODE STARTS HERE AND FINISHES AT SECTION 3            2
// 2     (code for which only stubs were generated automatically)          2
// 2     You should add the implementation but dont alter the headers      2
// 2     (apart from constructor, in which you should complete initializati2
// 2     on list)                                                          2
// 2222222222222222222222222222222222222222222222222222222222222222222222222

/* sample ctr */
DRpdoCachedVariable::DRpdoCachedVariable (
    const Configuration::RpdoCachedVariable& config,
    Parent_DRpdoCachedVariable* parent
):
    Base_DRpdoCachedVariable( config, parent)

    /* fill up constructor initialization list here */
{
    /* fill up constructor body here */
}

/* sample dtr */
DRpdoCachedVariable::~DRpdoCachedVariable ()
{
}

/* delegates for cachevariables */


/* ASYNCHRONOUS !! */
UaStatus DRpdoCachedVariable::readValue (
    UaVariant& value,
    UaDateTime& sourceTime
)
{
    try
    {
        value = ValueMapper::extractFromBytesIntoVariant(&getParent()->getCache()[0], getParent()->getCache().size(), dataType(), offset(), std::to_string(booleanToBit()));
        sourceTime = UaDateTime::now();
        return OpcUa_Good;
    }
    catch(const std::exception& e)
    {
        LOG(Log::ERR) << wrapId(getFullName()) << " readValue exception: " << e.what();
        return OpcUa_Bad;
    }
}

/* ASYNCHRONOUS !! */
UaStatus DRpdoCachedVariable::writeValue (
    UaVariant& value
)
{
    // modify the cache
    // if boolean ... we can't use the value packer because we're (or might be) on cross-byte boundary
    if (dataType() == "Boolean")
    {
        OpcUa_Boolean b;
        if (value.toBool(b) != OpcUa_Good)
        {
            LOG(Log::ERR, "Sdo") << wrapId (getFullName()) << " Received value can't be casted to boolean.";
            throw std::runtime_error("Received value can't be casted to boolean.");
        }
        getParent()->getCache()[offset()] |= (b ? 0x01 : 0x00) << 3;
    }
    else
    {
        std::vector<uint8_t> bytes = ValueMapper::packVariantToBytes(value, dataType());
        std::copy(
            bytes.begin(),
            bytes.end(),
            getParent()->getCache().begin()); // TODO: we're missiing cache there!
    }
       

    // and send out cache to the device



    getParent()->propagateCache();
    //getParent()->getParent()->getParent()->sendMessage(rpdoMessage);
    return OpcUa_Good;
}

/* delegators for methods */

// 3333333333333333333333333333333333333333333333333333333333333333333333333
// 3     FULLY CUSTOM CODE STARTS HERE                                     3
// 3     Below you put bodies for custom methods defined for this class.   3
// 3     You can do whatever you want, but please be decent.               3
// 3333333333333333333333333333333333333333333333333333333333333333333333333

}