
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.

    The stub of this file was generated by quasar (https://github.com/quasar-team/quasar/)

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.


 */


#include <Configuration.hxx> // TODO; should go away, is already in Base class for ages

#include <DMultiplexedChannel.h>
#include <ASMultiplexedChannel.h>

#include <DExtractedValue.h>
#include <DRoot.h>
#include <DWarnings.h>

#include <Logging.hpp>

using namespace Logging;

namespace Device
{
// 1111111111111111111111111111111111111111111111111111111111111111111111111
// 1     GENERATED CODE STARTS HERE AND FINISHES AT SECTION 2              1
// 1     Users don't modify this code!!!!                                  1
// 1     If you modify this code you may start a fire or a flood somewhere,1
// 1     and some human being may possible cease to exist. You don't want  1
// 1     to be charged with that!                                          1
// 1111111111111111111111111111111111111111111111111111111111111111111111111






// 2222222222222222222222222222222222222222222222222222222222222222222222222
// 2     SEMI CUSTOM CODE STARTS HERE AND FINISHES AT SECTION 3            2
// 2     (code for which only stubs were generated automatically)          2
// 2     You should add the implementation but dont alter the headers      2
// 2     (apart from constructor, in which you should complete initializati2
// 2     on list)                                                          2
// 2222222222222222222222222222222222222222222222222222222222222222222222222

/* sample ctr */
DMultiplexedChannel::DMultiplexedChannel (
    const Configuration::MultiplexedChannel& config,
    Parent_DMultiplexedChannel* parent
):
    Base_DMultiplexedChannel( config, parent),
    m_onSync(false), // to be initialized later
    m_parentMultiplex(nullptr), // to be initialized later
    m_firstIteration(true),
    m_receivedCtrSinceLastSync(0)

    /* fill up constructor initialization list here */
{
    /* fill up constructor body here */
}

/* sample dtr */
DMultiplexedChannel::~DMultiplexedChannel ()
{
}

/* delegates for cachevariables */



/* delegators for methods */

// 3333333333333333333333333333333333333333333333333333333333333333333333333
// 3     FULLY CUSTOM CODE STARTS HERE                                     3
// 3     Below you put bodies for custom methods defined for this class.   3
// 3     You can do whatever you want, but please be decent.               3
// 3333333333333333333333333333333333333333333333333333333333333333333333333

void DMultiplexedChannel::initialize()
{
    m_onSync = m_parentMultiplex->transportMechanism() == "sync";
}

void DMultiplexedChannel::onReplyReceived(const CanMessage& msg)
{
    m_receivedCtrSinceLastSync++;

    for (DExtractedValue* extractedValue : extractedvalues())
        extractedValue->onReplyReceived(msg);
}

void DMultiplexedChannel::notifySync ()
{

    if (m_onSync)
    {
        // Feature clause FP2.1.1: Warning of missing data between SYNCs
        if (!m_firstIteration && m_receivedCtrSinceLastSync != 1) // 1 per sync is a valid number for non-MPDO traffic.
        {
            if (DRoot::getInstance()->warningss()[0]->tpdoSyncMismatch())
            {
                SPOOKY(getFullName()) << "expected 1 M-TPDO in the previous SYNC cycle but got " << wrapValue(std::to_string(m_receivedCtrSinceLastSync)) << 
                    ". Likely a grave configuration issue. " << SPOOKY_ << "[WtpdoSyncMismatch]";
            }
        }
        m_receivedCtrSinceLastSync = 0;
        m_firstIteration = false;
    }
}

}