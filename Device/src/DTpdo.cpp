
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.

    The stub of this file was generated by quasar (https://github.com/quasar-team/quasar/)

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.


 */
\

#include <Configuration.hxx> // TODO; should go away, is already in Base class for ages

#include <DTpdo.h>
#include <ASTpdo.h>
#include <DNode.h>
#include <DBus.h>

#include <DExtractedValue.h>

#include <Logging.hpp>
#include <FrameFactory.hpp>

using namespace Logging;

namespace Device
{
// 1111111111111111111111111111111111111111111111111111111111111111111111111
// 1     GENERATED CODE STARTS HERE AND FINISHES AT SECTION 2              1
// 1     Users don't modify this code!!!!                                  1
// 1     If you modify this code you may start a fire or a flood somewhere,1
// 1     and some human being may possible cease to exist. You don't want  1
// 1     to be charged with that!                                          1
// 1111111111111111111111111111111111111111111111111111111111111111111111111






// 2222222222222222222222222222222222222222222222222222222222222222222222222
// 2     SEMI CUSTOM CODE STARTS HERE AND FINISHES AT SECTION 3            2
// 2     (code for which only stubs were generated automatically)          2
// 2     You should add the implementation but dont alter the headers      2
// 2     (apart from constructor, in which you should complete initializati2
// 2     on list)                                                          2
// 2222222222222222222222222222222222222222222222222222222222222222222222222

/* sample ctr */
DTpdo::DTpdo (
    const Configuration::Tpdo& config,
    Parent_DTpdo* parent
):
    Base_DTpdo( config, parent)

    /* fill up constructor initialization list here */
{
    /* fill up constructor body here */
    // for the mode of on-sync supports rtr, we should send an RTR each time there is a state change towards preop
    if (config.transportMechanism() == "asyncSupportsRtr")
    {
        getParent()->addNodeStateChangeCallBack(
            [this](CANopen::NodeState previous, CANopen::NodeState current)
            {
                if (current == CANopen::NodeState::OPERATIONAL)
                {
                    if (getParent()->getParent()->isInSpyMode())
                    {
                        LOG(Log::TRC) << wrapId(getFullName()) << " would send RTR for state change into OPERATIONAL, but we're in the spy mode.";
                    }
                    else
                    {
                        // Note: Feature clause FP6.2
                        LOG(Log::TRC) << wrapId(getFullName()) << " sending RTR for state change into OPERATIONAL";
                        this->sendRtr();
                    }
                }
            });
    }
}

/* sample dtr */
DTpdo::~DTpdo ()
{
}

/* delegates for cachevariables */



/* delegators for methods */

// 3333333333333333333333333333333333333333333333333333333333333333333333333
// 3     FULLY CUSTOM CODE STARTS HERE                                     3
// 3     Below you put bodies for custom methods defined for this class.   3
// 3     You can do whatever you want, but please be decent.               3
// 3333333333333333333333333333333333333333333333333333333333333333333333333

void DTpdo::onReplyReceived(const CanMessage& msg)
{
    LOG(Log::TRC) << "received TPDO reply: " << msg.toString();
    for (DExtractedValue* extractedValue : extractedvalues())
    {
        extractedValue->onReplyReceived(msg);
    }
}

void DTpdo::sendRtr()
{
    // only when in non spy mode!!!! --> also complete the documentation
    // TODO: send this fucking RTR.
    getParent()->getParent()->sendMessage(
        CANopen::makeTpdoRtr(getParent()->id(), 0x180/*TODO*/));
}

}